# Kubernetes Security Configuration for Blackjack Frontend
# This file provides production-ready security contexts and policies
apiVersion: v1
kind: ConfigMap
metadata:
  name: blackjack-frontend-security-config
  namespace: blackjack-casino
  labels:
    app: blackjack-frontend
    security.level: "high"
data:
  security-context.yaml: |
    # Pod Security Context
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      runAsGroup: 1001
      fsGroup: 1001
      seccompProfile:
        type: RuntimeDefault
      supplementalGroups: []
    
    # Container Security Context
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 1001
      runAsGroup: 1001
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
        add: []
      privileged: false
    
    # Resource Limits
    resources:
      limits:
        memory: "256Mi"
        cpu: "200m"
        ephemeral-storage: "1Gi"
      requests:
        memory: "128Mi"
        cpu: "100m"
        ephemeral-storage: "500Mi"

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: blackjack-frontend-psp
  namespace: blackjack-casino
  labels:
    app: blackjack-frontend
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAs'
    ranges:
      - min: 1001
        max: 1001
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1001
        max: 1001
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1001
        max: 1001
  readOnlyRootFilesystem: true

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: blackjack-frontend-netpol
  namespace: blackjack-casino
  labels:
    app: blackjack-frontend
spec:
  podSelector:
    matchLabels:
      app: blackjack-frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-system
    - podSelector:
        matchLabels:
          app: ingress-controller
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: blackjack-api
    - podSelector:
        matchLabels:
          app: blackjack-api
    ports:
    - protocol: TCP
      port: 443
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Example Deployment with Security Context
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blackjack-frontend
  namespace: blackjack-casino
  labels:
    app: blackjack-frontend
    version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: blackjack-frontend
  template:
    metadata:
      labels:
        app: blackjack-frontend
        version: "1.0.0"
      annotations:
        # Security annotations
        container.apparmor.security.beta.kubernetes.io/blackjack-frontend: runtime/default
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
    spec:
      serviceAccountName: blackjack-frontend-sa
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: blackjack-frontend
        image: blackjack-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
              - ALL
        resources:
          limits:
            memory: "256Mi"
            cpu: "200m"
          requests:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /var/cache/nginx
        - name: log-volume
          mountPath: /var/log/nginx
        env:
        - name: NODE_ENV
          value: "production"
        - name: NGINX_USER
          value: "nginx-app"
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: cache-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: log-volume
        emptyDir:
          sizeLimit: 100Mi
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "blackjack-frontend"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - blackjack-frontend
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: blackjack-frontend-sa
  namespace: blackjack-casino
  labels:
    app: blackjack-frontend
automountServiceAccountToken: false

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: blackjack-casino
  name: blackjack-frontend-role
rules: []  # No permissions needed for frontend

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: blackjack-frontend-binding
  namespace: blackjack-casino
subjects:
- kind: ServiceAccount
  name: blackjack-frontend-sa
  namespace: blackjack-casino
roleRef:
  kind: Role
  name: blackjack-frontend-role
  apiGroup: rbac.authorization.k8s.io